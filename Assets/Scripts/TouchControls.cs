//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touches"",
            ""id"": ""337061a8-95eb-425e-ad15-6a16bd06cfc7"",
            ""actions"": [
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4404a0cb-12a3-4111-9a70-5e91c30d0f51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9c1fa24b-4831-4963-a4f7-99f39ffc7140"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""703d1aa9-272b-442c-894b-884df39fb6c4"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93a6aadc-e3dc-472a-bb67-6120a3680d66"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffc790f4-51c8-4852-a100-2150338e9e54"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba3ed72f-e740-4ad9-bbab-b974f2aefeed"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touches
        m_Touches = asset.FindActionMap("Touches", throwIfNotFound: true);
        m_Touches_PrimaryPosition = m_Touches.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_Touches_PrimaryContact = m_Touches.FindAction("PrimaryContact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touches
    private readonly InputActionMap m_Touches;
    private ITouchesActions m_TouchesActionsCallbackInterface;
    private readonly InputAction m_Touches_PrimaryPosition;
    private readonly InputAction m_Touches_PrimaryContact;
    public struct TouchesActions
    {
        private @TouchControls m_Wrapper;
        public TouchesActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryPosition => m_Wrapper.m_Touches_PrimaryPosition;
        public InputAction @PrimaryContact => m_Wrapper.m_Touches_PrimaryContact;
        public InputActionMap Get() { return m_Wrapper.m_Touches; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchesActions set) { return set.Get(); }
        public void SetCallbacks(ITouchesActions instance)
        {
            if (m_Wrapper.m_TouchesActionsCallbackInterface != null)
            {
                @PrimaryPosition.started -= m_Wrapper.m_TouchesActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_TouchesActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_TouchesActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryContact.started -= m_Wrapper.m_TouchesActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_TouchesActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_TouchesActionsCallbackInterface.OnPrimaryContact;
            }
            m_Wrapper.m_TouchesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
            }
        }
    }
    public TouchesActions @Touches => new TouchesActions(this);
    public interface ITouchesActions
    {
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnPrimaryContact(InputAction.CallbackContext context);
    }
}
